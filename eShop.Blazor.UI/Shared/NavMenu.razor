@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAuthenticationService authService

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">eShop.Blazor.UI</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        @if (IsLoggedIn)
        {
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                    <span class="oi oi-home" aria-hidden="true"></span> Home
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="counter">
                    <span class="oi oi-plus" aria-hidden="true"></span> Counter
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="admin/products">
                    <span class="fab fa-product-hunt pr-3" aria-hidden="true" style="font-size:1.3em;"></span> Products
                </NavLink>
            </li>
            <li class="nav-item px-3">
                <NavLink class="nav-link" @onclick="async () => await OnLogout()">
                    <span class="oi oi-account-login" aria-hidden="true"></span> Logout
                </NavLink>
            </li>
        }
        else
        {
            <li class="nav-item px-3">
                <NavLink class="nav-link" href="login">
                    <span class="oi oi-account-login" aria-hidden="true"></span> Login
                </NavLink>
            </li>
        }
    </ul>
</div>

@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private bool IsLoggedIn = false;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            IsLoggedIn = true;
        }
        else
            IsLoggedIn = false;
    }

    public async Task OnLogout()
    {
        IsLoggedIn = false;
        await authService.Logout();

    }

}
